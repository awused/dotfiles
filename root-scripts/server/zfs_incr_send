#!/usr/bin/env bash
# /root/zfs_incr_send

#
# Incremental ZFS send/recv backup script
#
# Original Author: Dave Eddy <dave@daveeddy.com>
# Date: November 20, 2015
# License: MIT



#########
# config
#########

# datasets to send
datasets=(
  zroot/ROOT/default
  zroot/usr/home
)

#receiving datasets
target_dataset='storage/local-backups'

# prefix to use for snapshots created by this script
snapshot_prefix='zfs-incr-send_'

# higher = more output
verbosity_level=0

# function to execute at the end - can be anything
# $1 - exit code - the code that will be used when this script exits
# returns - nothing
end() {
	local exitcode=$1
	local msg=
	case "$exitcode" in
		0) msg='ok';;
		*) msg='failed';;
	esac
}

#############
# end config
#############

debug() {
	((verbosity_level >= 1)) && echo "[DEBUG] $*" >&2
	return 0
}
trace() {
	((verbosity_level >= 2)) && echo "[TRACE] $*" >&2
	return 0
}

process() {
	local ds=$1

	local snapshot_opts=()
	local send_opts=()
	if [[ -n $2 ]]; then
		# recursive
		snapshot_opts+=(-r)
		send_opts+=(-R)
	fi

	echo ''
	echo "processing dataset: $ds"
	echo ''

	# Step 1 - snapshot locally
	local now=$(date +%s)
        local snapshot_name=${snapshot_prefix}${now}
	local snap=$ds@${snapshot_name}
	echo "creating snapshot locally: $snap"
	if ! zfs snapshot "${snapshot_opts[@]}" "$snap"; then
		echo "[ERROR] failed to snapshot $ds" >&2
		return 1
	fi

	# Step 2 - find the latest eemote snapshot
	local rds=$target_dataset/${ds}

	local inc_snap=
	local inc_opts=()
	debug "fetching latest remote snapshot for dataset: $rds"
	local rsnap=$(zfs list -H -o name,creation -p -t snapshot -r "$rds" | \
		    grep "^$rds@" | \
		    sort -n -k 2 | \
		    tail -1 | \
		    awk '{ print $1 }')

	if [[ -n $rsnap ]]; then
		echo "latest remote snapshot: $rsnap"
		inc_snap=${rsnap#*@}
		# assert that $inc_snap exists locally
		if ! zfs list -t snapshot "$ds@$inc_snap" &>/dev/null; then
			echo "[ERROR] could not find $rsnap locally ($ds@$inc_snap not found)" >&2
			return 1
		fi
		inc_opts+=(-i "@$inc_snap")
	else
		echo "no snapshot found for $ds - doing full send/recv"
	fi

	# Step 3: send from latest remote to newly created
	# or do a full send
	if [[ -n $inc_snap ]]; then
		echo "zfs sending (incremental) @$inc_snap -> $snap to $rds"
	else
		echo "zfs sending $snap to $rds"
	fi
	if ! zfs send "${send_opts[@]}" "${inc_opts[@]}" "$snap" | zfs recv -Fuv "$rds"; then
		echo "[ERROR] failed to send $snap to $rds" >&2
		return 1
	fi

        # Step 4: cleanup old incremental snapshots
        if [[ -n $inc_snap ]]; then
          echo Destroying "$rds@$inc_snap" and "$ds@$inc_snap"
          zfs destroy "$rds@$inc_snap"
          zfs destroy "$ds@$inc_snap"
        fi


	return 0
}

code=0
for ds in "${datasets[@]}"; do
	process "$ds" || code=1
done

end "$code"
exit "$code"
