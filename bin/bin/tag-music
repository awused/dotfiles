#! /usr/bin/env python
# Recursively tags audio files that lack titles with a title from my filename format
# Also ensures all files have replaygain tags, though it won't realize when the replaygain format is wrong

# Run with -n for a dry run or with -f to force overwriting replaygain

import argparse
import mutagen
import os
import re
import subprocess
import sys
from mutagen.oggvorbis import OggVorbis
from mutagen.id3 import ID3, TIT2
from mutagen.apev2 import APEv2, APEv2File, APENoHeaderError

filetypes = ['flac', 'aac', 'ac3', 'opus']
id3filetypes = ['mp3']
oggfiletypes = ['ogg']
rgfiles = []

# My format
fname_re = re.compile(u"^.* - x?[0-9]+ - (.+)\.[^.]+$")

parser = argparse.ArgumentParser(
    description=
    "Recursively tags files and runs loudness scanner for EBU R128 replaygain scanning"
)
parser.add_argument("-n", "--dry_run", help="Dry run", action="store_true")
parser.add_argument(
    "-f",
    "--force_rg",
    help="Force Replaygain scanning even for files that have tags",
    action="store_true")
parser.add_argument(
    "directory",
    help="The directory to be scanned",
    nargs="?",
    default=u".",
    type=unicode)

args = parser.parse_args()


def tagFile(fname):
    f = mutagen.File(fname)
    if 'title' not in f:
        match = fname_re.match(fname)
        if match:
            print fname
            print match.group(1)
            f["title"] = match.group(1)
            if not args.dry_run:
                f.save()
    if args.force_rg or ('replaygain_track_gain' not in f
                         and 'r128_track_gain' not in f):
        rgfiles.append(fname)


def tagID3File(fname):
    f = ""
    try:
        f = ID3(fname)
    except Exception as e:
        if e.message.endswith("doesn't start with an ID3 tag"):
            tagAPEFile(fname)
        else:
            print fname
            print e
            print
        return
    if 'TIT2' not in f:
        match = fname_re.match(fname)
        if match:
            print fname
            print match.group(1)
            f.add(TIT2(encoding=3, text=match.group(1)))
            if not args.dry_run:
                f.save()
    if args.force_rg or 'TXXX:replaygain_track_gain' not in f:
        rgfiles.append(fname)


def tagOggFile(fname):
    f = OggVorbis(fname)
    if 'title' not in f:
        match = fname_re.match(fname)
        if match:
            print fname
            print match.group(1)
            f["title"] = match.group(1)
            if not args.dry_run:
                f.save()
    if args.force_rg or 'replaygain_track_gain' not in f:
        rgfiles.append(fname)


def tagM4AFile(fname):
    f = mutagen.File(fname)
    if '\xa9nam' not in f:
        match = fname_re.match(fname)
        if match:
            print fname
            print match.group(1)
            f["\xa9nam"] = match.group(1)
            if not args.dry_run:
                f.save()
    if args.force_rg or '----:com.apple.iTunes:replaygain_track_peak' not in f:
        rgfiles.append(fname)


def tagAPEFile(fname):
    f = None
    try:
        f = APEv2(fname)
    except APENoHeaderError as e:
        f = APEv2File(fname)
        f.add_tags()
        f = f.tags

    if 'Title' not in f:
        match = fname_re.match(fname)
        if match:
            print fname
            print match.group(1)
            f["Title"] = match.group(1)
            if not args.dry_run:
                f.save(fname)
    if args.force_rg or 'replaygain_track_gain' not in f:
        rgfiles.append(fname)


for root, dirs, files in os.walk(args.directory):
    for f in files:
        for ft in filetypes:
            if f.endswith(ft):
                tagFile(os.path.join(root, f))
                break
        for ft in id3filetypes:
            if f.endswith(ft):
                tagID3File(os.path.join(root, f))
                break
        for ft in oggfiletypes:
            if f.endswith(ft):
                tagOggFile(os.path.join(root, f))
                break
        for ft in ['m4a']:
            if f.endswith(ft):
                tagM4AFile(os.path.join(root, f))
                break

if len(rgfiles) > 0:
    print "EBU R128 Scanning"
    for files in [rgfiles[i:i + 50] for i in range(0, len(rgfiles), 50)]:
        print files
        rgargs = ['loudness', 'tag', '-t']
        rgargs.extend(files)
        if not args.dry_run:
            p = subprocess.Popen(rgargs, stdout=sys.stdout)
            p.wait()
