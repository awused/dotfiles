#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set foldmethod=marker foldlevel=0:
# Recursively tags audio files that lack titles with a title from my filename format
# Also ensures all files have replaygain tags, though it won't realize when the replaygain format is wrong

# Run with -n for a dry run or with -f to force overwriting replaygain

import argparse
import codecs
import mutagen
import os
import re
import subprocess
import sys
import multiprocessing
from mutagen.oggvorbis import OggVorbis
from mutagen.id3 import ID3, TIT2, TPE1, TPE2
from mutagen.apev2 import APEv2, APEv2File, APENoHeaderError
from multiprocessing.pool import ThreadPool

sys.stdin = codecs.getreader('utf-8')(sys.stdin)

filetypes = ['.flac', '.aac', '.opus']
apefiletypes = ['.ac3']
id3filetypes = ['.mp3']
oggfiletypes = ['.ogg']
rgfiles = []

# My format
fname_re = re.compile(u"^(.+) - x?[0-9]+ - (.+)\.[^.]+$")

parser = argparse.ArgumentParser(
    description=
    "Recursively tags files and runs loudness scanner for EBU R128 replaygain scanning"
)
parser.add_argument("-n", "--dry_run", help="Dry run", action="store_true")
parser.add_argument(
    "--force_rg",
    help="Force Replaygain scanning even for files that have tags",
    action="store_true")
parser.add_argument("--force_title",
                    help="Force taking the title from the filename. " +
                    "You really want to test this with -n first",
                    action="store_true")
parser.add_argument(
    "--set_album_artist",
    help="Set the album artist from the filename if it isn't present. " +
    "You really want to test this with -n first",
    action="store_true")
parser.add_argument(
    "--override_various_artists",
    help=
    "Overrides 'Various Artists' and 'various' when used with --set_album_artist. ",
    action="store_true")
parser.add_argument("directory",
                    help="The directory to be scanned, - for stdin",
                    nargs="?",
                    default=u".",
                    type=unicode)
parser.add_argument("-d",
                    "--depth",
                    help="The depth to be scanned, -1 for no limit",
                    default=3,
                    type=int)

args = parser.parse_args()
# {{{ Artist override map
artist_map = {
    u"ぴずやの独房": u"Pizuya's Cell",
    u"あ～るの～と": u"R-Note",
    u"発熱巫女～ず": u"Hatsunetsumiko's",
    u"発熱巫女〜ず": u"Hatsunetsumiko's",
    u"サリー": u"Sally",
    u"豚乙女": u"BUTAOTOME",
    u"りすとら": u"Liz Triangle",
    u"魂音泉": u"TAMAONSEN",
    u"幽閉サテライト": u"Yuuhei Satellite",
    u"イオシス": u"IOSYS",
    u"まぐなむお～ぱす": u"Magnum Opus",
    u"白狐茶会": u"White Fox Tea Party",
    u"幽閉サテライト 白狐茶会": u"Pizuya's Cell x White Fox Tea Party",
    u"いえろ～ぜぶら": u"Yellow Zebra",
    u"ふぉれすとぴれお": u"Forestpireo",
    u"こなぐすり": u"Conagusuri",
    u"とらのあな": u"Toranoana",
    u"領域ZERO": u"Area-ZERO",
    u"セブンスヘブンMAXION": u"Seventh Heaven MAXION",
    u"第零交響師団": u"Zero Symphonic Battalion",
    u"凋叶棕": u"RD-Sounds",
    u"はちみつれもん": u"Hachimitsu-Lemon",
    u"岸田教団&THE明星ロケッツ": u"Kishida Kyoudan & The Akeboshi Rockets",
    u"森羅万象": u"ShinRa-Bansho",
    u"俺++": u"Includeore",
    u"舞風": u"MAIKAZE",
    u"子猫奪回屋": u"KONEKODAKKAIYA",
    u"魂音泉 x 豚乙女 x COOL&CREATE": u"TAMAONSEN x BUTAOTOME x COOL&CREATE",
    u"ななひら": u"Nanahira",
    u"綾倉 盟": u"Mei Ayakura",
    u"綾倉盟": u"Mei Ayakura",
    u"めらみぽっぷ": u"Meramipop",
    u"めらみぽっぷ(COSMOPOLITAN)": u"Meramipop",
    u"紫咲ほたる": u"Hotaru Murasaki",
    u"隣人": u"Linjin",
    u"みぃ": u"Mie",
    u"美歌": u"Mika",
    u"舞花": u"Maika",
    u"綾倉 盟／市松 椿": u"Mei Ayakura/Tsubaki Ichimatsu",
    u"綾倉 盟/市松 椿": u"Mei Ayakura/Tsubaki Ichimatsu",
    u"まめみ": u"Mamemi",
    u"真崎エリカ": u"Masaki Erica",
    u"流派華劇団": u"Ryuuha Mitsukitei",
    u"天然ジェミニ": u"Tennenjemini",
    u"愛原佑季＆愛原千尋": u"Yuuki Aihara & Chihiro Aihara",
    u"藤宮ゆき": u"Yuki Fujimiya",
    u"ゆーな": u"Yuuna",
    u"未知艺术家": u"Vivienne",
    u"びびあん": u"Vivienne",
    u"花咲あんな": u"Hanasaki Anna",
    u"East New Sound": u"EastNewSound",
    u"暁Records": u"Akatsuki Records",
    u"暁Records×Liz Triangle": u"Akatsuki Records x Liz Triangle",
    u"芳葉": u"Yoshiha",
    u"此糸ウルヱ": u"Urue Koreito",
    u"東方黒髪少女地位向上委員会": u"Foxtail Grass Studio",
    u"オーライフジャパン": u"O-Life Japan",
    u"バル": u"Baru",
    u"ハム": u"Ham",
    u"佳織みちる": u"Michiru Kaori",
    u"あいざわ": u"Aizawa",
    u"ゆーな/悠花": u"Yuuna/Yuka",
    u"弟の姉": u"Kurosawa Madoka",
    u"yukina;みぃ": u"yukina & Mie",
    u"坂上なち": u"Sakaue Nachi",
    u"小田ユウ": u"Oda Yuu",
    u"あき": u"Aki",
    u"陽花": u"Youka",
    u"まやろーやる": u"Mayaroyal",
    u"にょ。": u"Nyo.",
    u"たま": u"Tama",
    u"ランコ": u"Ranko",
    u"ほたる": u"Hotaru",
    u"556ミリメートル": u"556mm",
    u"あよ": u"Ayo",
    u"夕月椿": u"Yuzuki Tsubaki",
    u"マンダリン": u"Mandarin",
    u"霖": u"Rin",
    u"あやぽんず＊": u"Ayaponzu*",
    u"あやぽんず*": u"Ayaponzu*",
    u"あやぽんず＊，あよ": u"Ayaponzu* & Ayo",
    u"茶太": u"Chata",
    u"ガールズ&パンツァ": u"Girls und Panzer",
    u"ナタP": u"NataP",
    u"こばきょん": u"Kobakyon",
    u"うっち－": u"Ucchii",
    u"小峠舞": u"Mai Kotohge",
    u"舞": u"Mai Kotohge",
    u"夕月椿": u"Tsubaki Yuuzuki",
    u"tomoya/yukina/みぃ": u"Tomoya/Yukina/Mie",
    u"舞花 & Vivienne": u"Maika & Vivienne",
    u"tomoya/ランコ": u"Tomoya/Ranko",
    u"あいかぴん": u"Aikapan",
    u"初音ミク": u"Hatsune Miku"
}
# }}}

# Compares a title while ignoring characters that aren't safe for file names
# and their common replacements
# Tries to avoid replacing "Title?" with "Title" or "A/B" with "A／Z"
# This is a manually curated list, and it could be smarter
# TODO -- Handle replacement characters positionally?
title_re = re.compile(u"[/?^\\<>\"'|:／,_.*＊-]")
spaces_re = re.compile(u" ( )+")
youtube_re = re.compile(u"-[a-zA-Z0-9_-]{11}$")


def titlesDiffer(title, fnametitle):
    fn = youtube_re.sub(" ", fnametitle)
    fn = title_re.sub(" ", fn)
    ti = title_re.sub(" ", title)
    fn = spaces_re.sub(" ", fn)
    ti = spaces_re.sub(" ", ti)
    if not title.endswith(" "):
        ti = ti.rstrip(" ")
    fn = fn.rstrip(" ")
    return fn != ti and not fn.endswith(ti)


def tagFile(fname):
    changed = False
    f = mutagen.File(fname)
    x = ""

    match = fname_re.match(os.path.basename(fname))
    if match:
        oldt = f.get('title', [''])[0]
        newt = match.group(2)
        if oldt == '' or (args.force_title and titlesDiffer(oldt, newt)):
            if not changed: x += "\n" + fname + "\n"
            changed = True
            f["title"] = newt
            x += "Title: " + oldt + " -> " + newt + "\n"

    a = f.get('artist', [''])[0].strip()
    if a in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["artist"] = artist_map[a]
        x += "Artist: " + a + " -> " + artist_map[a] + "\n"

    aa = f.get('albumartist', [''])[0].strip()
    if aa in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["albumartist"] = artist_map[aa]
        x += "Album Artist: " + aa + " -> " + artist_map[aa] + "\n"

    if match and args.set_album_artist and (
            aa == "" or
        (args.override_various_artists and
         (aa.lower() == 'various artists' or aa.lower() == 'various'))):
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["albumartist"] = match.group(1)
        x += "Album Artist: " + aa + " -> " + match.group(1) + "\n"

    if x != "":
        sys.stdout.write(x + "\n")

    if changed and not args.dry_run:
        f.save()

    if args.force_rg or ('replaygain_track_gain' not in f
                         and 'r128_track_gain' not in f):
        rgfiles.append(fname)


def tagID3File(fname):
    changed = False
    f = ""
    x = ""
    try:
        f = ID3(fname)
    except Exception as e:
        if e.message.endswith("doesn't start with an ID3 tag"):
            tagAPEFile(fname)
        else:
            x += fname + "\n"
            x += e + "\n"
            sys.stdout.write(x + "\n")
        return

    match = fname_re.match(os.path.basename(fname))
    if match:
        oldt = f.get('TIT2', [''])[0]
        newt = match.group(2)
        if oldt == '' or (args.force_title and titlesDiffer(oldt, newt)):
            if not changed: x += "\n" + fname + "\n"
            changed = True
            f.delall('TIT2')
            f.add(TIT2(encoding=3, text=newt))
            x += "Title: " + oldt + " -> " + newt + "\n"

    a = f.get('TPE1', [''])[0].strip()
    if a in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f.delall('TPE1')
        f.add(TPE1(encoding=3, text=artist_map[a]))
        x += "Artist: " + a + " -> " + artist_map[a] + "\n"

    aa = f.get('TPE2', [''])[0].strip()
    if aa in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f.delall('TPE2')
        f.add(TPE2(encoding=3, text=artist_map[aa]))
        x += "Album Artist: " + aa + " -> " + artist_map[aa] + "\n"

    if match and args.set_album_artist and (
            aa == "" or
        (args.override_various_artists and
         (aa.lower() == 'various artists' or aa.lower() == 'various'))):
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f.delall('TPE2')
        f.add(TPE2(encoding=3, text=match.group(1)))
        x += "Album Artist: " + aa + " -> " + match.group(1) + "\n"

    if x != "":
        sys.stdout.write(x + "\n")

    if changed and not args.dry_run:
        f.save()

    if args.force_rg or 'TXXX:replaygain_track_gain' not in f:
        rgfiles.append(fname)


def tagOggFile(fname):
    changed = False
    f = OggVorbis(fname)
    x = ""

    match = fname_re.match(os.path.basename(fname))
    if match:
        oldt = f.get('title', [''])[0]
        newt = match.group(2)
        if oldt == '' or (args.force_title and titlesDiffer(oldt, newt)):
            if not changed: x += "\n" + fname + "\n"
            changed = True
            f["title"] = newt
            x += "Title: " + oldt + " -> " + newt + "\n"

    a = f.get('artist', [''])[0].strip()
    if a in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["artist"] = artist_map[a]
        x += "Artist: " + a + " -> " + artist_map[a] + "\n"

    aa = f.get('albumartist', [''])[0].strip()
    if aa in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["albumartist"] = artist_map[aa]
        x += "Album Artist: " + aa + " -> " + artist_map[aa] + "\n"

    if match and args.set_album_artist and (
            aa == "" or
        (args.override_various_artists and
         (aa.lower() == 'various artists' or aa.lower() == 'various'))):
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["albumartist"] = match.group(1)
        x += "Album Artist: " + aa + " -> " + match.group(1) + "\n"

    if x != "":
        sys.stdout.write(x + "\n")

    if changed and not args.dry_run:
        f.save()

    if args.force_rg or 'replaygain_track_gain' not in f:
        rgfiles.append(fname)


def tagM4AFile(fname):
    changed = False
    f = mutagen.File(fname)
    x = ""

    match = fname_re.match(os.path.basename(fname))
    if match:
        oldt = f.get("\xa9nam", [''])[0]
        newt = match.group(2)
        if oldt == '' or (args.force_title and titlesDiffer(oldt, newt)):
            if not changed: x += "\n" + fname + "\n"
            changed = True
            f["\xa9nam"] = newt
            x += "Title: " + oldt + " -> " + newt + "\n"

    a = f.get("\xa9ART", [''])[0].strip()
    if a in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["\xa9ART"] = artist_map[a]
        x += "Artist: " + a + " -> " + artist_map[a] + "\n"

    aa = f.get("aART", [''])[0].strip()
    if aa in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["aART"] = artist_map[aa]
        x += "Album Artist: " + aa + " -> " + artist_map[aa] + "\n"

    if match and args.set_album_artist and (
            aa == "" or
        (args.override_various_artists and
         (aa.lower() == 'various artists' or aa.lower() == 'various'))):
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["aART"] = match.group(1)
        x += "Album Artist: " + aa + " -> " + match.group(1) + "\n"

    if x != "":
        sys.stdout.write(x + "\n")

    if changed and not args.dry_run:
        f.save()

    if args.force_rg or '----:com.apple.iTunes:replaygain_track_peak' not in f:
        rgfiles.append(fname)


def tagAPEFile(fname):
    changed = False
    f = None
    x = ""
    try:
        f = APEv2(fname)
    except APENoHeaderError as e:
        f = APEv2File(fname)
        f.add_tags()
        f = f.tags

    match = fname_re.match(os.path.basename(fname))
    if match:
        oldt = f.get('Title', [''])[0]
        newt = match.group(2)
        if oldt == '' or (args.force_title and titlesDiffer(oldt, newt)):
            if not changed: x += "\n" + fname + "\n"
            changed = True
            f["Title"] = newt
            x += "Title: " + oldt + " -> " + newt + "\n"

    a = f.get('Artist', [''])[0].strip()
    if a in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["Artist"] = artist_map[a]
        x += "Artist: " + a + " -> " + artist_map[a] + "\n"

    aa = f.get('Album artist', [''])[0].strip()
    if aa in artist_map:
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["Album artist"] = artist_map[aa]
        x += "Album Artist: " + aa + " -> " + artist_map[aa] + "\n"

    if match and args.set_album_artist and (
            aa == "" or
        (args.override_various_artists and
         (aa.lower() == 'various artists' or aa.lower() == 'various'))):
        if not changed: x += "\n" + fname + "\n"
        changed = True
        f["Album artist"] = match.group(1)
        x += "Album Artist: " + aa + " -> " + match.group(1) + "\n"

    if x != "":
        sys.stdout.write(x + "\n")

    if changed and not args.dry_run:
        f.save(fname)

    if args.force_rg or 'replaygain_track_gain' not in f:
        rgfiles.append(fname)


# See https://stackoverflow.com/questions/229186/os-walk-without-digging-into-directories-below
def walklevel(some_dir, level=-1):
    some_dir = some_dir.rstrip(os.path.sep)
    assert os.path.isdir(some_dir)
    num_sep = some_dir.count(os.path.sep)
    for root, dirs, files in os.walk(some_dir):
        if u"$RECYCLE.BIN" in root:
            del dirs[:]
            continue
        yield root, dirs, files
        num_sep_this = root.count(os.path.sep)
        if level != -1 and num_sep + level <= num_sep_this:
            del dirs[:]


def tagPath(path):
    for ft in filetypes:
        if path.endswith(ft):
            tagFile(path)
            return
    for ft in apefiletypes:
        if path.endswith(ft):
            tagAPEFile(path)
            return
    for ft in id3filetypes:
        if path.endswith(ft):
            tagID3File(path)
            return
    for ft in oggfiletypes:
        if path.endswith(ft):
            tagOggFile(path)
            return
    for ft in ['m4a']:
        if path.endswith(ft):
            tagM4AFile(path)
            return


pool = ThreadPool(multiprocessing.cpu_count() * 2)

if args.directory != u'-':
    for root, dirs, files in walklevel(args.directory, args.depth):
        files.sort()
        for f in files:
            pool.apply_async(tagPath, (os.path.join(root, f), ))
else:
    for line in sys.stdin:
        pool.apply_async(tagPath, (line.rstrip('\n'), ))

pool.close()
pool.join()

if len(rgfiles) > 0:
    print "EBU R128 Scanning"
    for files in [rgfiles[i:i + 128] for i in range(0, len(rgfiles), 128)]:
        print files
        rgargs = ['loudness', 'tag', '-t']
        rgargs.extend(files)
        if not args.dry_run:
            p = subprocess.Popen(rgargs, stdout=sys.stdout)
            p.wait()
