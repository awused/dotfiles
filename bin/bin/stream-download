#! /usr/bin/env bash

set -e

regex="(v=|be/|^)([a-zA-Z0-9_-]{11})"
id=""
chatpid=""

if [[ $1 =~ $regex ]]; then
  id="${BASH_REMATCH[2]}"
else
  echo "Could not identify video ID"
fi

url="https://www.youtube.com/watch?v=${id}"
html=$(curl -s "$url")

# Attempt to match youtube-dl's escaping
clean() {
    echo "$1" | python3 -c 'import html, sys; [print(html.unescape(l), end="") for l in sys.stdin]' | \
      sed -E 's/\/|\\/_/g' | sed -E 's/:/ -/g'
}

title=$(echo "$html" | grep -oE "<title>.*</title>" | sed 's/<title>//' | sed 's/<\/title>//' | sed 's/ - YouTube//i')
channel=$(echo "$html" | grep -oE 'ownerChannelName":"[^"]*"' | sed 's/ownerChannelName":"//' | sed 's/"//')
title=$(clean "$title")
channel=$(clean "$channel")

dir="/storage/media/youtube/${channel}"
file="${dir}/${title}-${id}.mp4"
fullchat="${dir}/${title}-${id}.full.json"

mkdir -p "$dir"

if [[ -e "$file" ]]; then
  echo "File $file already exists"
  exit 1
fi

echo "Downloading $id to $file"


if [[ ! -e "$fullchat" ]]; then
  echo "Downloading chat for $id to $fullchat"
  touch "$fullchat"
  chat_downloader "$url" --message_groups all --output "$fullchat" > /dev/null &
  chatpid=$!
  trap 'kill %1' SIGINT SIGTERM
else
  echo "Chat file $fullchat already exists"
fi

streamlink --retry-streams 10 "$url" best -o "$file" || true

[ -n "$chatpid" ] && wait "$chatpid"
